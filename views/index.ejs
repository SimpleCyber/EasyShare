<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EasyShare</title>
    <link rel="icon" type="image/png" href="https://raw.githubusercontent.com/SimpleCyber/EasyShare/main/assets/favicon.png">

    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        body.dark {
            background-color: #1a202c;
            color: #e2e8f0;
        }
        body.dark .bg-white {
            background-color: #2d3748;
            color: #e2e8f0;
        }
        body.dark .bg-blue-100 {
            background-color: #2c4169;
            color: #9cc8ff;
        }
        body.dark .text-blue-800 {
            color: #9cc8ff;
        }
        .progress-bar {
            transition: width 0.5s ease-in-out;
        }
        .editable-filename {
            cursor: text;
        }
        .editable-filename input {
            display: none;
        }
        .editable-filename.editing .filename-text {
            display: none;
        }
        .editable-filename.editing input {
            display: block;
        }
        .file-card {
            transition: all 0.2s ease;
        }
        .file-card:hover {
            transform: translateY(-2px);
        }
        .file-select-checkbox {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 10;
        }
        .fa-share-alt{
            background-color: orange;
            padding: .6rem;
            border: 0px;
            border-radius: 50%;
        }
    </style>
</head>
<body class="<%= theme === 'dark' ? 'dark bg-gray-900' : 'bg-gray-100' %>">
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold <%= theme === 'dark' ? 'text-white' : 'text-gray-800' %>">
                <i class="fas fa-share-alt mr-2"></i>EasyShare
            </h1>
            <div class="flex items-center space-x-4">
                <button id="themeToggle" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors">
                    <i class="fas fa-moon mr-2"></i>Toggle Theme
                </button>
                <button id="createTextBtn" class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition-colors">
                    <i class="fas fa-file-alt mr-2"></i>Create Text
                </button>
                <button id="createRoomBtn" class="bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 transition-colors">
                    <i class="fas fa-lock mr-2"></i>Private Room
                </button>
                <label class="block">
                    <input type="file" id="fileUpload" class="hidden" multiple />
                    <span class="bg-green-500 text-white px-4 py-2 rounded cursor-pointer hover:bg-green-600 transition-colors">
                        <i class="fas fa-upload mr-2"></i>Upload File
                    </span>
                </label>
            </div>
        </div>

        <!-- Upload Progress Bar -->
        <div id="uploadProgress" class="hidden mb-4">
            <div class="bg-gray-200 rounded-full h-2.5">
                <div class="bg-blue-600 h-2.5 rounded-full progress-bar" style="width: 0%"></div>
            </div>
            <p id="uploadStatus" class="text-center mt-2"></p>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-between items-center mb-6">
            <div class="flex space-x-2">
                <button id="selectAllBtn" class="bg-gray-200 text-gray-800 px-3 py-1 rounded hover:bg-gray-300 transition-colors <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : '' %>">
                    <i class="fas fa-check-square mr-1"></i>Select All
                </button>
                <button id="deselectAllBtn" class="bg-gray-200 text-gray-800 px-3 py-1 rounded hover:bg-gray-300 transition-colors <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : '' %>">
                    <i class="fas fa-square mr-1"></i>Deselect All
                </button>
            </div>
            <button id="shareSelectedBtn" class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition-colors hidden">
                <i class="fas fa-share-alt mr-2"></i>Share Selected (<span id="selectedCount">0</span>)
            </button>
        </div>

        <!-- Filter Controls -->
        <div class="mb-6 flex flex-wrap gap-2">
            <button class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors" data-filter="all">
                <i class="fas fa-th-large mr-1"></i>All
            </button>
            <button class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors" data-filter="image">
                <i class="fas fa-image mr-1"></i>Images
            </button>
            <button class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors" data-filter="video">
                <i class="fas fa-video mr-1"></i>Videos
            </button>
            <button class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors" data-filter="pdf">
                <i class="fas fa-file-pdf mr-1"></i>PDFs
            </button>
            <button class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors" data-filter="text">
                <i class="fas fa-file-alt mr-1"></i>Text
            </button>
            <button class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors" data-filter="other">
                <i class="fas fa-file mr-1"></i>Other
            </button>
        </div>

        <!-- File List -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <% files.forEach(function(file) { %>
                <div class="bg-white shadow rounded-lg p-4 <%= theme === 'dark' ? 'bg-gray-700' : '' %> file-card relative" data-type="<%= file.type %>">
                    <input type="checkbox" class="file-select-checkbox form-checkbox h-5 w-5 text-blue-600 rounded" value="<%= file.filename %>" />
                    
                    <div class="mb-4">
                        <% if (file.type === 'image') { %>
                            <img src="<%= file.url %>" alt="<%= file.filename %>" 
                                 class="w-full h-48 object-cover rounded mb-4">
                        <% } else if (file.type === 'video') { %>
                            <video controls class="w-full h-48 rounded mb-4">
                                <source src="<%= file.url %>" type="video/<%= file.format %>">
                                Your browser does not support the video tag.
                            </video>
                        <% } else if (file.type === 'pdf') { %>
                            <div class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center">
                                <i class="fas fa-file-pdf text-red-500 text-5xl"></i>
                            </div>
                        <% } else if (file.type === 'text') { %>
                            <div class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center">
                                <i class="fas fa-file-alt text-blue-500 text-5xl"></i>
                            </div>
                        <% } else { %>
                            <div class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center">
                                <i class="fas fa-file text-gray-500 text-5xl"></i>
                            </div>
                        <% } %>
                        
                        <div class="flex justify-between items-center">
                            <div class="editable-filename w-full flex items-center">
                                <span class="filename-text truncate mr-2 flex-grow">
                                    <%= file.filename.split('/').pop() %>
                                </span>
                                <input type="text" 
                                       class="filename-input w-full px-2 py-1 border rounded" 
                                       value="<%= file.filename.split('/').pop() %>"
                                       data-original-filename="<%= file.filename %>"
                                >
                                <button class="edit-filename ml-2 text-blue-500 hover:text-blue-700">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-between items-center">
                        <div class="text-sm <%= theme === 'dark' ? 'text-gray-400' : 'text-gray-500' %>">
                            <i class="fas fa-weight mr-1"></i>
                            <%= (file.bytes / 1024 / 1024).toFixed(2) %> MB
                        </div>
                        <div class="flex space-x-2">
                            <a href="<%= file.url %>" 
                               target="_blank" 
                               class="text-blue-500 hover:text-blue-700 transition-colors"
                               title="Preview">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="<%= file.url %>" 
                               download 
                               class="text-green-500 hover:text-green-700 transition-colors"
                               title="Download">
                                <i class="fas fa-download"></i>
                            </a>
                            <a href="/delete/<%= file.filename %>" 
                               onclick="return confirm('Are you sure you want to delete this file?');" 
                               class="text-red-500 hover:text-red-700 transition-colors"
                               title="Delete">
                                <i class="fas fa-trash"></i>
                            </a>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>

        <!-- No Files Message -->
        <% if (files.length === 0) { %>
            <div class="text-center py-10">
                <div class="text-6xl mb-4 <%= theme === 'dark' ? 'text-gray-600' : 'text-gray-300' %>">
                    <i class="fas fa-cloud-upload-alt"></i>
                </div>
                <h2 class="text-2xl font-semibold mb-2">No files yet</h2>
                <p class="text-gray-500">Upload your first file to get started</p>
            </div>
        <% } %>
    </div>

    <!-- Create Text File Modal -->
    <div id="createTextModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">Create Text File</h2>
                    <button id="closeTextModal" class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2">
                        File Name
                    </label>
                    <input type="text" 
                           id="textFilename" 
                           placeholder="untitled.txt" 
                           class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
                    >
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2">
                        Content
                    </label>
                    <textarea id="textContent" 
                              rows="15" 
                              class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
                              placeholder="Type your content here..."></textarea>
                </div>
                
                <div class="flex justify-end space-x-2">
                    <button id="cancelTextBtn" class="px-4 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> transition-colors">
                        Cancel
                    </button>
                    <button id="saveTextBtn" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Share Link Modal -->
    <div id="shareModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">Share Selected Files</h2>
                    <button id="closeShareModal" class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div id="selectedFilesList" class="mb-4 max-h-48 overflow-y-auto">
                    <!-- Selected files will be displayed here -->
                </div>
                
                <div id="shareLinkContainer" class="mb-4 hidden">
                    <div class="flex items-center">
                        <input type="text" 
                               id="shareLinkInput" 
                               readonly 
                               class="w-full px-3 py-2 border rounded-l-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
                        >
                        <button id="copyShareLinkBtn" class="px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600 transition-colors">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                    <p class="text-sm mt-2 <%= theme === 'dark' ? 'text-gray-400' : 'text-gray-500' %>">
                        This link will expire in 24 hours
                    </p>
                </div>
                
                <div id="shareButtonContainer">
                    <button id="generateShareLinkBtn" class="w-full px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors">
                        Generate Share Link
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Private Room Modal -->
    <div id="createRoomModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">Create Private Room</h2>
                    <button id="closeRoomModal" class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2">
                        Room ID
                    </label>
                    <div class="flex">
                        <input type="text" 
                               id="roomId" 
                               placeholder="Enter a unique room ID" 
                               class="w-full px-3 py-2 border rounded-l-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
                        >
                        <button id="generateRoomIdBtn" class="px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600 transition-colors">
                            <i class="fas fa-random"></i>
                        </button>
                    </div>
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2">
                        Password
                    </label>
                    <div class="flex">
                        <input type="password" 
                               id="roomPassword" 
                               placeholder="Enter a password" 
                               class="w-full px-3 py-2 border rounded-l-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
                        >
                        <button id="togglePasswordBtn" class="px-4 py-2 bg-gray-200 text-gray-600 rounded-r-md hover:bg-gray-300 transition-colors <%= theme === 'dark' ? 'bg-gray-600 text-gray-300 hover:bg-gray-500' : '' %>">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                
                <div id="roomCreatedContainer" class="mb-4 hidden">
                    <div class="p-4 bg-green-100 text-green-800 rounded-md <%= theme === 'dark' ? 'bg-green-900 text-green-200' : '' %>">
                        <p>Room created successfully! Share this link:</p>
                        <div class="flex items-center mt-2">
                            <input type="text" 
                                   id="roomLinkInput" 
                                   readonly 
                                   class="w-full px-3 py-2 border rounded-l-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600 text-white' : '' %>"
                            >
                            <button id="copyRoomLinkBtn" class="px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600 transition-colors">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-2">
                    <button id="cancelRoomBtn" class="px-4 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> transition-colors">
                        Cancel
                    </button>
                    <button id="createRoomActionBtn" class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors">
                        Create Room
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Access Private Room Modal -->
    <div id="accessRoomModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">Access Private Room</h2>
                    <button id="closeAccessRoomModal" class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2">
                        Room ID
                    </label>
                    <input type="text" 
                           id="accessRoomId" 
                           placeholder="Enter room ID" 
                           class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
                    >
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2">
                        Password
                    </label>
                    <input type="password" 
                           id="accessRoomPassword" 
                           placeholder="Enter password" 
                           class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
                    >
                </div>
                
                <div id="accessError" class="mb-4 hidden">
                    <div class="p-4 bg-red-100 text-red-800 rounded-md <%= theme === 'dark' ? 'bg-red-900 text-red-200' : '' %>">
                        <p id="accessErrorMessage">Invalid room ID or password</p>
                    </div>
                </div>
                
                <div class="flex justify-end space-x-2">
                    <button id="cancelAccessBtn" class="px-4 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> transition-colors">
                        Cancel
                    </button>
                    <button id="accessRoomBtn" class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors">
                        Access Room
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript logic -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Theme toggle
            const themeToggle = document.getElementById('themeToggle');
            themeToggle.addEventListener('click', function() {
                const isDark = document.body.classList.contains('dark');
                const newTheme = isDark ? 'light' : 'dark';
                window.location.href = `/?theme=${newTheme}`;
            });

            // File upload handling
            const fileUpload = document.getElementById('fileUpload');
            fileUpload.addEventListener('change', function() {
                if (this.files.length > 0) {
                    const formData = new FormData();
                    for (let i = 0; i < this.files.length; i++) {
                        formData.append('file', this.files[i]);
                    }
                    
                    // Show progress bar
                    const progressBar = document.querySelector('.progress-bar');
                    const uploadProgress = document.getElementById('uploadProgress');
                    const uploadStatus = document.getElementById('uploadStatus');
                    uploadProgress.classList.remove('hidden');
                    progressBar.style.width = '0%';
                    uploadStatus.textContent = 'Uploading...';
                    
                    // Upload using axios
                    axios.post('/upload', formData, {
                        onUploadProgress: (progressEvent) => {
                            const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                            progressBar.style.width = percentCompleted + '%';
                            uploadStatus.textContent = `Uploading: ${percentCompleted}%`;
                        }
                    })
                    .then(response => {
                        uploadStatus.textContent = 'Upload complete!';
                        setTimeout(() => window.location.reload(), 1000);
                    })
                    .catch(error => {
                        uploadStatus.textContent = 'Upload failed: ' + error.message;
                        progressBar.classList.add('bg-red-600');
                    });
                }
            });

            // File selection functionality
            const fileCheckboxes = document.querySelectorAll('.file-select-checkbox');
            const selectAllBtn = document.getElementById('selectAllBtn');
            const deselectAllBtn = document.getElementById('deselectAllBtn');
            const shareSelectedBtn = document.getElementById('shareSelectedBtn');
            const selectedCount = document.getElementById('selectedCount');
            
            function updateSelectedCount() {
                const checkedBoxes = document.querySelectorAll('.file-select-checkbox:checked');
                selectedCount.textContent = checkedBoxes.length;
                
                if (checkedBoxes.length > 0) {
                    shareSelectedBtn.classList.remove('hidden');
                } else {
                    shareSelectedBtn.classList.add('hidden');
                }
            }
            
            fileCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectedCount);
            });
            
            selectAllBtn.addEventListener('click', function() {
                fileCheckboxes.forEach(checkbox => {
                    checkbox.checked = true;
                });
                updateSelectedCount();
            });
            
            deselectAllBtn.addEventListener('click', function() {
                fileCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
                updateSelectedCount();
            });

            // File filtering
            const filterBtns = document.querySelectorAll('.filter-btn');
            const fileCards = document.querySelectorAll('.file-card');
            
            filterBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const filter = this.getAttribute('data-filter');
                    
                    // Toggle active class
                    filterBtns.forEach(b => b.classList.remove('bg-blue-500', 'text-white'));
                    this.classList.add('bg-blue-500', 'text-white');
                    
                    // Filter files
                    fileCards.forEach(card => {
                        if (filter === 'all' || card.getAttribute('data-type') === filter) {
                            card.classList.remove('hidden');
                        } else {
                            card.classList.add('hidden');
                        }
                    });
                });
            });

            // Editable filename
            const editFilenameButtons = document.querySelectorAll('.edit-filename');
            
            editFilenameButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    const filenameContainer = this.closest('.editable-filename');
                    filenameContainer.classList.toggle('editing');
                    
                    if (filenameContainer.classList.contains('editing')) {
                        const input = filenameContainer.querySelector('.filename-input');
                        input.focus();
                        
                        input.addEventListener('blur', function() {
                            const originalFilename = this.getAttribute('data-original-filename');
                            const newFilename = this.value.trim();
                            
                            if (newFilename && newFilename !== originalFilename.split('/').pop()) {
                                // Send rename request
                                axios.post('/rename', {
                                    oldFilename: originalFilename,
                                    newFilename: newFilename
                                })
                                .then(response => {
                                    if (response.data.success) {
                                        window.location.reload();
                                    }
                                })
                                .catch(error => {
                                    alert('Error renaming file: ' + error.message);
                                });
                            }
                            
                            filenameContainer.classList.remove('editing');
                        });
                        
                        input.addEventListener('keypress', function(e) {
                            if (e.key === 'Enter') {
                                this.blur();
                            }
                        });
                    }
                });
            });

// ...existing code...
            // Text file creation
            const createTextBtn = document.getElementById('createTextBtn');
            const createTextModal = document.getElementById('createTextModal');
            const closeTextModal = document.getElementById('closeTextModal');
            const cancelTextBtn = document.getElementById('cancelTextBtn');
            const saveTextBtn = document.getElementById('saveTextBtn');
            const textFilename = document.getElementById('textFilename');
            const textContent = document.getElementById('textContent');

            function toggleTextModal(show) {
                createTextModal.style.display = show ? 'flex' : 'none';
                if (!show) {
                    textFilename.value = '';
                    textContent.value = '';
                }
            }

            createTextBtn.addEventListener('click', () => toggleTextModal(true));
            closeTextModal.addEventListener('click', () => toggleTextModal(false));
            cancelTextBtn.addEventListener('click', () => toggleTextModal(false));

            saveTextBtn.addEventListener('click', async () => {
                const filename = textFilename.value.trim() || 'untitled.txt';
                const content = textContent.value;

                try {
                    const response = await axios.post('/create-text', {
                        filename,
                        content
                    });

                    if (response.data.success) {
                        window.location.reload();
                    } else {
                        throw new Error('Failed to create text file');
                    }
                } catch (error) {
                    alert('Error creating text file: ' + error.message);
                }
            });

            // Share functionality
            const shareModal = document.getElementById('shareModal');
            const closeShareModal = document.getElementById('closeShareModal');
            const generateShareLinkBtn = document.getElementById('generateShareLinkBtn');
            const shareLinkContainer = document.getElementById('shareLinkContainer');
            const shareLinkInput = document.getElementById('shareLinkInput');
            const copyShareLinkBtn = document.getElementById('copyShareLinkBtn');
            const selectedFilesList = document.getElementById('selectedFilesList');

            shareSelectedBtn.addEventListener('click', () => {
                const selectedFiles = Array.from(document.querySelectorAll('.file-select-checkbox:checked'))
                    .map(checkbox => checkbox.value);

                selectedFilesList.innerHTML = selectedFiles
                    .map(file => `<div class="mb-2">${file.split('/').pop()}</div>`)
                    .join('');

                shareModal.style.display = 'flex';
                shareLinkContainer.classList.add('hidden');
            });

            closeShareModal.addEventListener('click', () => {
                shareModal.style.display = 'none';
                shareLinkContainer.classList.add('hidden');
            });

            generateShareLinkBtn.addEventListener('click', async () => {
                const selectedFiles = Array.from(document.querySelectorAll('.file-select-checkbox:checked'))
                    .map(checkbox => checkbox.value);

                try {
                    const response = await axios.post('/create-share', {
                        files: selectedFiles
                    });

                    shareLinkInput.value = `${window.location.origin}/share/${response.data.shareLink}`;
                    shareLinkContainer.classList.remove('hidden');
                } catch (error) {
                    alert('Error generating share link: ' + error.message);
                }
            });

            copyShareLinkBtn.addEventListener('click', () => {
                shareLinkInput.select();
                document.execCommand('copy');
                alert('Share link copied to clipboard!');
            });

            // Private room functionality
            const createRoomModal = document.getElementById('createRoomModal');
            const closeRoomModal = document.getElementById('closeRoomModal');
            const generateRoomIdBtn = document.getElementById('generateRoomIdBtn');
            const togglePasswordBtn = document.getElementById('togglePasswordBtn');
            const roomPassword = document.getElementById('roomPassword');
            const createRoomActionBtn = document.getElementById('createRoomActionBtn');
            const cancelRoomBtn = document.getElementById('cancelRoomBtn');
            const roomCreatedContainer = document.getElementById('roomCreatedContainer');
            const roomLinkInput = document.getElementById('roomLinkInput');
            const copyRoomLinkBtn = document.getElementById('copyRoomLinkBtn');

            function generateRandomId() {
                return Math.random().toString(36).substring(2, 10);
            }

            createRoomBtn.addEventListener('click', () => {
                createRoomModal.style.display = 'flex';
            });

            closeRoomModal.addEventListener('click', () => {
                createRoomModal.style.display = 'none';
                roomCreatedContainer.classList.add('hidden');
            });

            cancelRoomBtn.addEventListener('click', () => {
                createRoomModal.style.display = 'none';
                roomCreatedContainer.classList.add('hidden');
            });

            generateRoomIdBtn.addEventListener('click', () => {
                document.getElementById('roomId').value = generateRandomId();
            });

            togglePasswordBtn.addEventListener('click', () => {
                const type = roomPassword.type === 'password' ? 'text' : 'password';
                roomPassword.type = type;
                togglePasswordBtn.innerHTML = `<i class="fas fa-${type === 'password' ? 'eye' : 'eye-slash'}"></i>`;
            });

            createRoomActionBtn.addEventListener('click', async () => {
                const roomId = document.getElementById('roomId').value.trim();
                const password = roomPassword.value.trim();

                if (!roomId || !password) {
                    alert('Room ID and password are required');
                    return;
                }

                try {
                    const response = await axios.post('/create-private-room', {
                        roomId,
                        password
                    });

                    if (response.data.success) {
                        roomLinkInput.value = `${window.location.origin}/room/${roomId}`;
                        roomCreatedContainer.classList.remove('hidden');
                    }
                } catch (error) {
                    alert('Error creating private room: ' + error.message);
                }
            });

            copyRoomLinkBtn.addEventListener('click', () => {
                roomLinkInput.select();
                document.execCommand('copy');
                alert('Room link copied to clipboard!');
            });
        });
    </script>
</body>
</html>