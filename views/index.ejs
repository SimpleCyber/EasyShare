<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EasyShare</title>
    <link
      rel="icon"
      type="image/png"
      href="https://raw.githubusercontent.com/SimpleCyber/EasyShare/main/assets/favicon.png"
    />

    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
      body.dark {
        background-color: #1a202c;
        color: #e2e8f0;
      }
      body.dark .bg-white {
        background-color: #2d3748;
        color: #e2e8f0;
      }
      body.dark .bg-blue-100 {
        background-color: #2c4169;
        color: #9cc8ff;
      }
      body.dark .text-blue-800 {
        color: #9cc8ff;
      }
      .progress-bar {
        transition: width 0.5s ease-in-out;
      }
      .editable-filename {
        cursor: text;
      }
      .editable-filename input {
        display: none;
      }
      .editable-filename.editing .filename-text {
        display: none;
      }
      .editable-filename.editing input {
        display: block;
      }
      .file-card {
        transition: all 0.2s ease;
      }
      .file-card:hover {
        transform: translateY(-2px);
      }
      .file-select-checkbox {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 10;
      }
      .fa-share-alt {
        background-color: orange;
        padding: 0.6rem;
        border: 0px;
        border-radius: 50%;
      }
    </style>
  </head>
  <body class="<%= theme === 'dark' ? 'dark bg-gray-900' : 'bg-gray-100' %>">
    <div class="container mx-auto px-4 py-8">
      <div class="flex justify-between items-center mb-6">
        <h1
          class="text-3xl font-bold <%= theme === 'dark' ? 'text-white' : 'text-gray-800' %>"
        >
          <i class="fas fa-share-alt mr-2"></i>EasyShare
        </h1>
        <div class="flex items-center space-x-4">
          <button
            id="themeToggle"
            class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
          >
            <i class="fas fa-moon mr-2"></i>Toggle Theme
          </button>
          <button
            id="createTextBtn"
            class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition-colors"
          >
            <i class="fas fa-file-alt mr-2"></i>Create Text
          </button>
          <button
            id="createRoomBtn"
            class="bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 transition-colors"
          >
            <i class="fas fa-lock mr-2"></i>Private Room
          </button>
          <label class="block">
            <input type="file" id="fileUpload" class="hidden" multiple />
            <span
              class="bg-green-500 text-white px-4 py-2 rounded cursor-pointer hover:bg-green-600 transition-colors"
            >
              <i class="fas fa-upload mr-2"></i>Upload File
            </span>
          </label>
        </div>
      </div>

      <!-- Upload Progress Bar -->
      <div id="uploadProgress" class="hidden mb-4">
        <div class="bg-gray-200 rounded-full h-2.5">
          <div
            class="bg-blue-600 h-2.5 rounded-full progress-bar"
            style="width: 0%"
          ></div>
        </div>
        <p id="uploadStatus" class="text-center mt-2"></p>
      </div>

      <!-- Action Buttons -->
      <div class="flex justify-between items-center mb-6">
        <div class="flex space-x-2">
          <button
            id="selectAllBtn"
            class="bg-gray-200 text-gray-800 px-3 py-1 rounded hover:bg-gray-300 transition-colors <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : '' %>"
          >
            <i class="fas fa-check-square mr-1"></i>Select All
          </button>
          <button
            id="deselectAllBtn"
            class="bg-gray-200 text-gray-800 px-3 py-1 rounded hover:bg-gray-300 transition-colors <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : '' %>"
          >
            <i class="fas fa-square mr-1"></i>Deselect All
          </button>
        </div>
        <button
          id="shareSelectedBtn"
          class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition-colors hidden"
        >
          <i class="fas fa-share-alt mr-2"></i>Share Selected (<span
            id="selectedCount"
            >0</span
          >)
        </button>
      </div>

      <!-- Filter Controls -->
      <div class="mb-6 flex flex-wrap gap-2">
        <button
          class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
          data-filter="all"
        >
          <i class="fas fa-th-large mr-1"></i>All
        </button>
        <button
          class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
          data-filter="image"
        >
          <i class="fas fa-image mr-1"></i>Images
        </button>
        <button
          class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
          data-filter="video"
        >
          <i class="fas fa-video mr-1"></i>Videos
        </button>
        <button
          class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
          data-filter="pdf"
        >
          <i class="fas fa-file-pdf mr-1"></i>PDFs
        </button>
        <button
          class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
          data-filter="text"
        >
          <i class="fas fa-file-alt mr-1"></i>Text
        </button>
        <button
          class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
          data-filter="other"
        >
          <i class="fas fa-file mr-1"></i>Other
        </button>
      </div>

      <!-- File List -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <% files.forEach(function(file) { %>
        <div
          class="bg-white shadow rounded-lg p-4 <%= theme === 'dark' ? 'bg-gray-700' : '' %> file-card relative"
          data-type="<%= file.type %>"
        >
          <input
            type="checkbox"
            class="file-select-checkbox form-checkbox h-5 w-5 text-blue-600 rounded"
            value="<%= file.filename %>"
          />

          <div class="mb-4">
            <% if (file.type === 'image') { %>
            <img
              src="<%= file.url %>"
              alt="<%= file.filename %>"
              class="w-full h-48 object-cover rounded mb-4"
            />
            <% } else if (file.type === 'video') { %>
            <video controls class="w-full h-48 rounded mb-4">
              <source src="<%= file.url %>" type="video/<%= file.format %>" />
              Your browser does not support the video tag.
            </video>
            <% } else if (file.type === 'pdf') { %>
            <div
              class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center"
            >
              <i class="fas fa-file-pdf text-red-500 text-5xl"></i>
            </div>
            <% } else if (file.type === 'text') { %>
            <div
              class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center"
            >
              <i class="fas fa-file-alt text-blue-500 text-5xl"></i>
            </div>
            <% } else { %>
            <div
              class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center"
            >
              <i class="fas fa-file text-gray-500 text-5xl"></i>
            </div>
            <% } %>

            <div class="flex justify-between items-center">
              <div class="editable-filename w-full flex items-center">
                <span class="filename-text truncate mr-2 flex-grow">
                  <%= file.filename.split('/').pop() %>
                </span>
                <input
                  type="text"
                  class="filename-input w-full px-2 py-1 border rounded"
                  value="<%= file.filename.split('/').pop() %>"
                  data-original-filename="<%= file.filename %>"
                />
                <button
                  class="edit-filename ml-2 text-blue-500 hover:text-blue-700"
                >
                  <i class="fas fa-edit"></i>
                </button>
              </div>
            </div>
          </div>

          <div class="flex justify-between items-center">
            <div
              class="text-sm <%= theme === 'dark' ? 'text-gray-400' : 'text-gray-500' %>"
            >
              <i class="fas fa-weight mr-1"></i>
              <%= (file.bytes / 1024 / 1024).toFixed(2) %> MB
            </div>
            <div class="flex space-x-2">
              <a
                href="<%= file.url %>"
                target="_blank"
                class="text-blue-500 hover:text-blue-700 transition-colors"
                title="Preview"
              >
                <i class="fas fa-eye"></i>
              </a>
              <a
                href="<%= file.url %>"
                download
                class="text-green-500 hover:text-green-700 transition-colors"
                title="Download"
              >
                <i class="fas fa-download"></i>
              </a>
              <a
                href="/delete/<%= file.filename %>"
                onclick="return confirm('Are you sure you want to delete this file?');"
                class="text-red-500 hover:text-red-700 transition-colors"
                title="Delete"
              >
                <i class="fas fa-trash"></i>
              </a>
            </div>
          </div>
        </div>
        <% }); %>
      </div>

      <!-- No Files Message -->
      <% if (files.length === 0) { %>
      <div class="text-center py-10">
        <div
          class="text-6xl mb-4 <%= theme === 'dark' ? 'text-gray-600' : 'text-gray-300' %>"
        >
          <i class="fas fa-cloud-upload-alt"></i>
        </div>
        <h2 class="text-2xl font-semibold mb-2">No files yet</h2>
        <p class="text-gray-500">Upload your first file to get started</p>
      </div>
      <% } %>
    </div>

    <!-- Create Text File Modal -->
    <div
      id="createTextModal"
      class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center"
    >
      <div
        class="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>"
      >
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Create Text File</h2>
            <button
              id="closeTextModal"
              class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>"
            >
              <i class="fas fa-times"></i>
            </button>
          </div>

          <div class="mb-4">
            <label
              class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2"
            >
              File Name
            </label>
            <input
              type="text"
              id="textFilename"
              placeholder="untitled.txt"
              class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
            />
          </div>

          <div class="mb-4">
            <label
              class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2"
            >
              Content
            </label>
            <textarea
              id="textContent"
              rows="15"
              class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
              placeholder="Type your content here..."
            ></textarea>
          </div>

          <div class="flex justify-end space-x-2">
            <button
              id="cancelTextBtn"
              class="px-4 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> transition-colors"
            >
              Cancel
            </button>
            <button
              id="saveTextBtn"
              class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors"
            >
              Save
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Share Link Modal -->
    <div
      id="shareModal"
      class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center"
    >
      <div
        class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>"
      >
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Share Selected Files</h2>
            <button
              id="closeShareModal"
              class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>"
            >
              <i class="fas fa-times"></i>
            </button>
          </div>

          <div id="selectedFilesList" class="mb-4 max-h-48 overflow-y-auto">
            <!-- Selected files will be displayed here -->
          </div>

          <div id="shareLinkContainer" class="mb-4 hidden">
            <div class="flex items-center">
              <input
                type="text"
                id="shareLinkInput"
                readonly
                class="w-full px-3 py-2 border rounded-l-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
              />
              <button
                id="copyShareLinkBtn"
                class="px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600 transition-colors"
              >
                <i class="fas fa-copy"></i>
              </button>
            </div>
            <p
              class="text-sm mt-2 <%= theme === 'dark' ? 'text-gray-400' : 'text-gray-500' %>"
            >
              This link will expire in 24 hours
            </p>
          </div>

          <div id="shareButtonContainer">
            <button
              id="generateShareLinkBtn"
              class="w-full px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors"
            >
              Generate Share Link
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Private Room Modal -->
    <div
      id="createRoomModal"
      class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center"
    >
      <div
        class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>"
      >
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Create Private Room</h2>
            <button
              id="closeRoomModal"
              class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>"
            >
              <i class="fas fa-times"></i>
            </button>
          </div>

          <div class="mb-4">
            <label
              class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2"
            >
              Room ID
            </label>
            <div class="flex">
              <input
                type="text"
                id="roomId"
                placeholder="Enter a unique room ID"
                class="w-full px-3 py-2 border rounded-l-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
              />
              <button
                id="generateRoomIdBtn"
                class="px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600 transition-colors"
              >
                <i class="fas fa-random"></i>
              </button>
            </div>
          </div>

          <div class="mb-4">
            <label
              class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2"
            >
              Password
            </label>
            <div class="flex">
              <input
                type="password"
                id="roomPassword"
                placeholder="Enter a password"
                class="w-full px-3 py-2 border rounded-l-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
              />
              <button
                id="togglePasswordBtn"
                class="px-4 py-2 bg-gray-200 text-gray-600 rounded-r-md hover:bg-gray-300 transition-colors <%= theme === 'dark' ? 'bg-gray-600 text-gray-300 hover:bg-gray-500' : '' %>"
              >
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </div>

          <div id="roomCreatedContainer" class="mb-4 hidden">
            <div
              class="p-4 bg-green-100 text-green-800 rounded-md <%= theme === 'dark' ? 'bg-green-900 text-green-200' : '' %>"
            >
              <p>Room created successfully! Share this link:</p>
              <div class="flex items-center mt-2">
                <input
                  type="text"
                  id="roomLinkInput"
                  readonly
                  class="w-full px-3 py-2 border rounded-l-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600 text-white' : '' %>"
                />
                <button
                  id="copyRoomLinkBtn"
                  class="px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600 transition-colors"
                >
                  <i class="fas fa-copy"></i>
                </button>
              </div>
            </div>
          </div>

          <div class="flex justify-end space-x-2">
            <button
              id="cancelRoomBtn"
              class="px-4 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> transition-colors"
            >
              Cancel
            </button>
            <button
              id="createRoomActionBtn"
              class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors"
            >
              Create Room
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Access Private Room Modal -->
    <div
      id="accessRoomModal"
      class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center"
    >
      <div
        class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>"
      >
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Access Private Room</h2>
            <button
              id="closeAccessRoomModal"
              class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>"
            >
              <i class="fas fa-times"></i>
            </button>
          </div>

          <div class="mb-4">
            <label
              class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2"
            >
              Room ID
            </label>
            <input
              type="text"
              id="accessRoomId"
              placeholder="Enter room ID"
              class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
            />
          </div>

          <div class="mb-4">
            <label
              class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2"
            >
              Password
            </label>
            <input
              type="password"
              id="accessRoomPassword"
              placeholder="Enter password"
              class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
            />
          </div>

          <div id="accessError" class="mb-4 hidden">
            <div
              class="p-4 bg-red-100 text-red-800 rounded-md <%= theme === 'dark' ? 'bg-red-900 text-red-200' : '' %>"
            >
              <p id="accessErrorMessage">Invalid room ID or password</p>
            </div>
          </div>

          <div class="flex justify-end space-x-2">
            <button
              id="cancelAccessBtn"
              class="px-4 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> transition-colors"
            >
              Cancel
            </button>
            <button
              id="accessRoomBtn"
              class="px-4 py-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600 transition-colors"
            >
              Access Room
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- JavaScript logic -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Theme toggle
        const themeToggle = document.getElementById("themeToggle");
        
        themeToggle.addEventListener("click", () => {
          const currentTheme = document.body.classList.contains("dark") ? "light" : "dark";
          window.location.href = `/?theme=${currentTheme}`;
        });
    
        // File upload handling
        const fileUpload = document.getElementById("fileUpload");
        const uploadProgress = document.getElementById("uploadProgress");
        const progressBar = uploadProgress.querySelector(".progress-bar");
        const uploadStatus = document.getElementById("uploadStatus");
    
        fileUpload.addEventListener("change", async (e) => {
          if (e.target.files.length === 0) return;
          
          uploadProgress.classList.remove("hidden");
          progressBar.style.width = "0%";
          uploadStatus.textContent = "Preparing upload...";
          
          const formData = new FormData();
          
          for (let i = 0; i < e.target.files.length; i++) {
            formData.append("file", e.target.files[i]);
            
            try {
              await uploadFile(formData, (progress) => {
                progressBar.style.width = `${progress}%`;
                uploadStatus.textContent = `Uploading file ${i + 1} of ${e.target.files.length}: ${progress.toFixed(0)}%`;
              });
              
              // Clear form data for next file
              formData.delete("file");
            } catch (error) {
              uploadStatus.textContent = `Error uploading file: ${error.message}`;
              console.error("Upload error:", error);
              setTimeout(() => {
                uploadProgress.classList.add("hidden");
              }, 3000);
              return;
            }
          }
          
          uploadStatus.textContent = "Upload complete!";
          setTimeout(() => {
            uploadProgress.classList.add("hidden");
            window.location.reload();
          }, 1500);
        });
    
        async function uploadFile(formData, progressCallback) {
          return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            
            xhr.open("POST", "/upload", true);
            
            xhr.upload.addEventListener("progress", (e) => {
              if (e.lengthComputable) {
                const progress = (e.loaded / e.total) * 100;
                progressCallback(progress);
              }
            });
            
            xhr.addEventListener("load", () => {
              if (xhr.status >= 200 && xhr.status < 300) {
                resolve(xhr.responseText);
              } else {
                reject(new Error(`HTTP Error: ${xhr.status}`));
              }
            });
            
            xhr.addEventListener("error", () => {
              reject(new Error("Network Error"));
            });
            
            xhr.send(formData);
          });
        }
    
        // File selection functionality
        const selectAllBtn = document.getElementById("selectAllBtn");
        const deselectAllBtn = document.getElementById("deselectAllBtn");
        const shareSelectedBtn = document.getElementById("shareSelectedBtn");
        const selectedCount = document.getElementById("selectedCount");
        const fileCheckboxes = document.querySelectorAll(".file-select-checkbox");
        
        function updateSelectedCount() {
          const count = document.querySelectorAll(".file-select-checkbox:checked").length;
          selectedCount.textContent = count;
          
          if (count > 0) {
            shareSelectedBtn.classList.remove("hidden");
          } else {
            shareSelectedBtn.classList.add("hidden");
          }
        }
        
        selectAllBtn.addEventListener("click", () => {
          fileCheckboxes.forEach(checkbox => {
            checkbox.checked = true;
          });
          updateSelectedCount();
        });
        
        deselectAllBtn.addEventListener("click", () => {
          fileCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
          });
          updateSelectedCount();
        });
        
        fileCheckboxes.forEach(checkbox => {
          checkbox.addEventListener("change", updateSelectedCount);
        });
    
        // File filtering
        const filterButtons = document.querySelectorAll(".filter-btn");
        const fileCards = document.querySelectorAll(".file-card");
        
        filterButtons.forEach(button => {
          button.addEventListener("click", () => {
            const filter = button.getAttribute("data-filter");
            
            // Update active button style
            filterButtons.forEach(btn => {
              btn.classList.remove("bg-blue-500", "text-white");
              btn.classList.add("bg-blue-100", "text-blue-800");
            });
            
            button.classList.remove("bg-blue-100", "text-blue-800");
            button.classList.add("bg-blue-500", "text-white");
            
            // Filter files
            fileCards.forEach(card => {
              if (filter === "all" || card.getAttribute("data-type") === filter) {
                card.style.display = "block";
              } else {
                card.style.display = "none";
              }
            });
          });
        });
    
        // Editable filename
        const editButtons = document.querySelectorAll(".edit-filename");
        
        editButtons.forEach(button => {
          button.addEventListener("click", () => {
            const filenameContainer = button.closest(".editable-filename");
            const filenameText = filenameContainer.querySelector(".filename-text");
            const filenameInput = filenameContainer.querySelector(".filename-input");
            
            if (filenameContainer.classList.contains("editing")) {
              // Save filename
              const newName = filenameInput.value.trim();
              const originalFilename = filenameInput.getAttribute("data-original-filename");
              
              if (newName && newName !== filenameText.textContent.trim()) {
                // Send rename request
                axios.post("/rename", {
                  oldFilename: originalFilename,
                  newFilename: newName,
                })
                .then(response => {
                  if (response.data.success) {
                    filenameText.textContent = newName;
                    filenameInput.setAttribute("data-original-filename", response.data.newFilename);
                  }
                })
                .catch(error => {
                  alert("Error renaming file: " + error.message);
                });
              }
              
              filenameContainer.classList.remove("editing");
              button.innerHTML = '<i class="fas fa-edit"></i>';
            } else {
              // Edit mode
              filenameContainer.classList.add("editing");
              filenameInput.focus();
              button.innerHTML = '<i class="fas fa-save"></i>';
            }
          });
        });
    
        // Text file creation functionality
        const createTextBtn = document.getElementById("createTextBtn");
        const createTextModal = document.getElementById("createTextModal");
        const closeTextModal = document.getElementById("closeTextModal");
        const cancelTextBtn = document.getElementById("cancelTextBtn");
        const saveTextBtn = document.getElementById("saveTextBtn");
        const textFilename = document.getElementById("textFilename");
        const textContent = document.getElementById("textContent");
        
        createTextBtn.addEventListener("click", () => {
          createTextModal.style.display = "flex";
        });
        
        closeTextModal.addEventListener("click", () => {
          createTextModal.style.display = "none";
        });
        
        cancelTextBtn.addEventListener("click", () => {
          createTextModal.style.display = "none";
        });
        
        saveTextBtn.addEventListener("click", async () => {
          const filename = textFilename.value.trim() || "untitled.txt";
          const content = textContent.value;
          
          if (!content) {
            alert("Please enter some content for the text file");
            return;
          }
          
          try {
            const response = await axios.post("/create-text", {
              filename,
              content,
            });
            
            if (response.data.success) {
              alert("Text file created successfully!");
              window.location.reload();
            }
          } catch (error) {
            alert("Error creating text file: " + error.message);
          }
        });
    
        // Share functionality
        const shareModal = document.getElementById("shareModal");
        const closeShareModal = document.getElementById("closeShareModal");
        const selectedFilesList = document.getElementById("selectedFilesList");
        const generateShareLinkBtn = document.getElementById("generateShareLinkBtn");
        const shareLinkContainer = document.getElementById("shareLinkContainer");
        const shareLinkInput = document.getElementById("shareLinkInput");
        const copyShareLinkBtn = document.getElementById("copyShareLinkBtn");
        const shareButtonContainer = document.getElementById("shareButtonContainer");
        
        shareSelectedBtn.addEventListener("click", () => {
          // Get selected files
          const selectedFiles = Array.from(document.querySelectorAll(".file-select-checkbox:checked"))
            .map(checkbox => checkbox.value);
          
          // Clear previous list
          selectedFilesList.innerHTML = "";
          
          // Populate selected files list
          if (selectedFiles.length > 0) {
            selectedFiles.forEach(file => {
              const listItem = document.createElement("div");
              listItem.className = "py-1";
              listItem.textContent = file.split('/').pop();
              selectedFilesList.appendChild(listItem);
            });
            
            shareModal.style.display = "flex";
            shareLinkContainer.classList.add("hidden");
            shareButtonContainer.classList.remove("hidden");
          } else {
            alert("No files selected");
          }
        });
        
        closeShareModal.addEventListener("click", () => {
          shareModal.style.display = "none";
        });
        
        generateShareLinkBtn.addEventListener("click", async () => {
          const selectedFiles = Array.from(document.querySelectorAll(".file-select-checkbox:checked"))
            .map(checkbox => checkbox.value);
          
          try {
            const response = await axios.post("/create-share", {
              files: selectedFiles,
            });
            
            if (response.data.shareLink) {
              shareLinkInput.value = `${window.location.origin}/share/${response.data.shareLink}`;
              shareLinkContainer.classList.remove("hidden");
              shareButtonContainer.classList.add("hidden");
            }
          } catch (error) {
            alert("Error creating share link: " + error.message);
          }
        });
        
        copyShareLinkBtn.addEventListener("click", () => {
          shareLinkInput.select();
          document.execCommand("copy");
          alert("Share link copied to clipboard!");
        });
    
        // Private room functionality
        const createRoomBtn = document.getElementById("createRoomBtn");
        const createRoomModal = document.getElementById("createRoomModal");
        const closeRoomModal = document.getElementById("closeRoomModal");
        const generateRoomIdBtn = document.getElementById("generateRoomIdBtn");
        const togglePasswordBtn = document.getElementById("togglePasswordBtn");
        const roomPassword = document.getElementById("roomPassword");
        const createRoomActionBtn = document.getElementById("createRoomActionBtn");
        const cancelRoomBtn = document.getElementById("cancelRoomBtn");
        const roomCreatedContainer = document.getElementById("roomCreatedContainer");
        const roomLinkInput = document.getElementById("roomLinkInput");
        const copyRoomLinkBtn = document.getElementById("copyRoomLinkBtn");
    
        // Access room functionality 
        const accessRoomModal = document.getElementById("accessRoomModal");
        const closeAccessRoomModal = document.getElementById("closeAccessRoomModal");
        const accessRoomBtn = document.getElementById("accessRoomBtn");
        const cancelAccessBtn = document.getElementById("cancelAccessBtn");
        const accessError = document.getElementById("accessError");
        const accessErrorMessage = document.getElementById("accessErrorMessage");
    
        function generateRandomId() {
          return Math.random().toString(36).substring(2, 10);
        }
    
        createRoomBtn.addEventListener("click", () => {
          createRoomModal.style.display = "flex";
        });
    
        closeRoomModal.addEventListener("click", () => {
          createRoomModal.style.display = "none";
          roomCreatedContainer.classList.add("hidden");
        });
    
        cancelRoomBtn.addEventListener("click", () => {
          createRoomModal.style.display = "none";
          roomCreatedContainer.classList.add("hidden");
        });
    
        generateRoomIdBtn.addEventListener("click", () => {
          document.getElementById("roomId").value = generateRandomId();
        });
    
        togglePasswordBtn.addEventListener("click", () => {
          const type = roomPassword.type === "password" ? "text" : "password";
          roomPassword.type = type;
          togglePasswordBtn.innerHTML = `<i class="fas fa-${
            type === "password" ? "eye" : "eye-slash"
          }"></i>`;
        });
    
        createRoomActionBtn.addEventListener("click", async () => {
          const roomId = document.getElementById("roomId").value.trim();
          const password = roomPassword.value.trim();
    
          if (!roomId || !password) {
            alert("Room ID and password are required");
            return;
          }
    
          try {
            const response = await axios.post("/create-private-room", {
              roomId,
              password,
            });
    
            if (response.data.success) {
              roomLinkInput.value = `${window.location.origin}/room/${roomId}`;
              roomCreatedContainer.classList.remove("hidden");
            }
          } catch (error) {
            if (error.response && error.response.data && error.response.data.error) {
              alert(error.response.data.error);
            } else {
              alert("Error creating private room: " + error.message);
            }
          }
        });
    
        copyRoomLinkBtn.addEventListener("click", () => {
          roomLinkInput.select();
          document.execCommand("copy");
          alert("Room link copied to clipboard!");
        });
    
        // Access room functionality
        document.getElementById("accessRoomBtn").addEventListener("click", async () => {
          const roomId = document.getElementById("accessRoomId").value.trim();
          const password = document.getElementById("accessRoomPassword").value.trim();
          
          if (!roomId || !password) {
            accessError.classList.remove("hidden");
            accessErrorMessage.textContent = "Room ID and password are required";
            return;
          }
          
          try {
            const response = await axios.post("/access-private-room", {
              roomId,
              password
            });
            
            if (response.data.success) {
              window.location.href = `/room/${roomId}?token=${response.data.accessToken}`;
            }
          } catch (error) {
            accessError.classList.remove("hidden");
            if (error.response && error.response.data && error.response.data.error) {
              accessErrorMessage.textContent = error.response.data.error;
            } else {
              accessErrorMessage.textContent = "Error accessing room";
            }
          }
        });
        
        closeAccessRoomModal.addEventListener("click", () => {
          accessRoomModal.style.display = "none";
          accessError.classList.add("hidden");
        });
        
        cancelAccessBtn.addEventListener("click", () => {
          accessRoomModal.style.display = "none";
          accessError.classList.add("hidden");
        });
      });
    </script>
  </body>
</html>
