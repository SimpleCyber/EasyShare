<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>EasyShare - Private Room</title>
  <link
    rel="icon"
    type="image/png"
    href="https://raw.githubusercontent.com/SimpleCyber/EasyShare/main/assets/favicon.png"
  />
  <link
    href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
    rel="stylesheet"
  />
  <link
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    rel="stylesheet"
  />
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <style>
    body.dark {
      background-color: #1a202c;
      color: #e2e8f0;
    }
    body.dark .bg-white {
      background-color: #2d3748;
      color: #e2e8f0;
    }
    body.dark .bg-blue-100 {
      background-color: #2c4169;
      color: #9cc8ff;
    }
    body.dark .text-blue-800 {
      color: #9cc8ff;
    }
    .progress-bar {
      transition: width 0.5s ease-in-out;
    }
    .file-card {
      transition: all 0.2s ease;
    }
    .file-card:hover {
      transform: translateY(-2px);
    }
  </style>
</head>
<body class="<%= theme === 'dark' ? 'dark bg-gray-900' : 'bg-gray-100' %>">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold <%= theme === 'dark' ? 'text-white' : 'text-gray-800' %>">
        <i class="fas fa-lock mr-2"></i>Private Room: <%= roomId %>
      </h1>
      <div class="flex items-center space-x-4">
        <button
          id="themeToggle"
          class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
        >
          <i class="fas fa-moon mr-2"></i>Toggle Theme
        </button>
        <button
          id="createTextBtn"
          class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 transition-colors"
        >
          <i class="fas fa-file-alt mr-2"></i>Create Text
        </button>
        <label class="block">
          <input type="file" id="fileUpload" class="hidden" multiple />
          <span
            class="bg-green-500 text-white px-4 py-2 rounded cursor-pointer hover:bg-green-600 transition-colors"
          >
            <i class="fas fa-upload mr-2"></i>Upload File
          </span>
        </label>
        <a
          href="/"
          class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors"
        >
          <i class="fas fa-home mr-2"></i>Back to Home
        </a>
      </div>
    </div>

    <!-- Upload Progress Bar -->
    <div id="uploadProgress" class="hidden mb-4">
      <div class="bg-gray-200 rounded-full h-2.5">
        <div
          class="bg-blue-600 h-2.5 rounded-full progress-bar"
          style="width: 0%"
        ></div>
      </div>
      <p id="uploadStatus" class="text-center mt-2"></p>
    </div>

    <!-- Filter Controls -->
    <div class="mb-6 flex flex-wrap gap-2">
      <button
        class="filter-btn bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 transition-colors"
        data-filter="all"
      >
        <i class="fas fa-th-large mr-1"></i>All
      </button>
      <button
        class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
        data-filter="image"
      >
        <i class="fas fa-image mr-1"></i>Images
      </button>
      <button
        class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
        data-filter="video"
      >
        <i class="fas fa-video mr-1"></i>Videos
      </button>
      <button
        class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
        data-filter="pdf"
      >
        <i class="fas fa-file-pdf mr-1"></i>PDFs
      </button>
      <button
        class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
        data-filter="text"
      >
        <i class="fas fa-file-alt mr-1"></i>Text
      </button>
      <button
        class="filter-btn bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors"
        data-filter="other"
      >
        <i class="fas fa-file mr-1"></i>Other
      </button>
    </div>

    <!-- File List -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      <% files.forEach(function(file) { %>
      <div
        class="bg-white shadow rounded-lg p-4 <%= theme === 'dark' ? 'bg-gray-700' : '' %> file-card relative"
        data-type="<%= file.type %>"
      >
        <div class="mb-4">
          <% if (file.type === 'image') { %>
          <img
            src="<%= file.url %>"
            alt="<%= file.filename %>"
            class="w-full h-48 object-cover rounded mb-4"
          />
          <% } else if (file.type === 'video') { %>
          <video controls class="w-full h-48 rounded mb-4">
            <source src="<%= file.url %>" type="video/<%= file.format %>" />
            Your browser does not support the video tag.
          </video>
          <% } else if (file.type === 'pdf') { %>
          <div
            class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center"
          >
            <i class="fas fa-file-pdf text-red-500 text-5xl"></i>
          </div>
          <% } else if (file.type === 'text') { %>
          <div
            class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center"
          >
            <i class="fas fa-file-alt text-blue-500 text-5xl"></i>
          </div>
          <% } else { %>
          <div
            class="w-full h-48 rounded mb-4 bg-gray-200 flex items-center justify-center"
          >
            <i class="fas fa-file text-gray-500 text-5xl"></i>
          </div>
          <% } %>

          <div class="flex justify-between items-center">
            <div class="truncate mr-2 flex-grow">
              <%= typeof file.filename === 'string' ? file.filename.split('/').pop() : file.filename %>
            </div>
          </div>
        </div>

        <div class="flex justify-between items-center">
          <div
            class="text-sm <%= theme === 'dark' ? 'text-gray-400' : 'text-gray-500' %>"
          >
            <i class="fas fa-weight mr-1"></i>
            <%= (file.bytes / 1024 / 1024).toFixed(2) %> MB
          </div>
          <div class="flex space-x-2">
            <a
              href="<%= file.url %>"
              target="_blank"
              class="text-blue-500 hover:text-blue-700 transition-colors"
              title="Preview"
            >
              <i class="fas fa-eye"></i>
            </a>
            <a
              href="<%= file.url %>"
              download
              class="text-green-500 hover:text-green-700 transition-colors"
              title="Download"
            >
              <i class="fas fa-download"></i>
            </a>
          </div>
        </div>
      </div>
      <% }); %>
    </div>

    <!-- No Files Message -->
    <% if (files.length === 0) { %>
    <div class="text-center py-10">
      <div
        class="text-6xl mb-4 <%= theme === 'dark' ? 'text-gray-600' : 'text-gray-300' %>"
      >
        <i class="fas fa-cloud-upload-alt"></i>
      </div>
      <h2 class="text-2xl font-semibold mb-2">No files in this room yet</h2>
      <p class="text-gray-500">Upload your first file to get started</p>
    </div>
    <% } %>
  </div>

  <!-- Create Text File Modal -->
  <div
    id="createTextModal"
    class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center"
  >
    <div
      class="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 <%= theme === 'dark' ? 'bg-gray-800 text-white' : '' %>"
    >
      <div class="p-6">
        <div class="flex justify-between items-center mb-4">
          <h2 class="text-xl font-bold">Create Text File</h2>
          <button
            id="closeTextModal"
            class="text-gray-500 hover:text-gray-700 <%= theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : '' %>"
          >
            <i class="fas fa-times"></i>
          </button>
        </div>

        <div class="mb-4">
          <label
            class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2"
          >
            File Name
          </label>
          <input
            type="text"
            id="textFilename"
            placeholder="untitled.txt"
            class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
          />
        </div>

        <div class="mb-4">
          <label
            class="block text-sm font-medium <%= theme === 'dark' ? 'text-gray-300' : 'text-gray-700' %> mb-2"
          >
            Content
          </label>
          <textarea
            id="textContent"
            rows="15"
            class="w-full px-3 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 border-gray-600' : '' %>"
            placeholder="Type your content here..."
          ></textarea>
        </div>

        <div class="flex justify-end space-x-2">
          <button
            id="cancelTextBtn"
            class="px-4 py-2 border rounded-md <%= theme === 'dark' ? 'bg-gray-700 text-white hover:bg-gray-600' : 'bg-gray-200 text-gray-800 hover:bg-gray-300' %> transition-colors"
          >
            Cancel
          </button>
          <button
            id="saveTextBtn"
            class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      // Theme toggle
      const themeToggle = document.getElementById("themeToggle");
      
      themeToggle.addEventListener("click", () => {
        const currentTheme = document.body.classList.contains("dark") ? "light" : "dark";
        window.location.href = `/room/<%= roomId %>?theme=${currentTheme}`;
      });

      // File upload handling
      const fileUpload = document.getElementById("fileUpload");
      const uploadProgress = document.getElementById("uploadProgress");
      const progressBar = uploadProgress.querySelector(".progress-bar");
      const uploadStatus = document.getElementById("uploadStatus");

      fileUpload.addEventListener("change", async (e) => {
        if (e.target.files.length === 0) return;
        
        uploadProgress.classList.remove("hidden");
        progressBar.style.width = "0%";
        uploadStatus.textContent = "Preparing upload...";
        
        const formData = new FormData();
        
        for (let i = 0; i < e.target.files.length; i++) {
          formData.append("file", e.target.files[i]);
          
          try {
            await uploadFile(formData, (progress) => {
              progressBar.style.width = `${progress}%`;
              uploadStatus.textContent = `Uploading file ${i + 1} of ${e.target.files.length}: ${progress.toFixed(0)}%`;
            });
            
            // Clear form data for next file
            formData.delete("file");
          } catch (error) {
            uploadStatus.textContent = `Error uploading file: ${error.message}`;
            console.error("Upload error:", error);
            setTimeout(() => {
              uploadProgress.classList.add("hidden");
            }, 3000);
            return;
          }
        }
        
        uploadStatus.textContent = "Upload complete!";
        setTimeout(() => {
          uploadProgress.classList.add("hidden");
          window.location.reload();
        }, 1500);
      });

      async function uploadFile(formData, progressCallback) {
        return new Promise((resolve, reject) => {
          const xhr = new XMLHttpRequest();
          
          xhr.open("POST", "/room/<%= roomId %>/upload", true);
          
          xhr.upload.addEventListener("progress", (e) => {
            if (e.lengthComputable) {
              const progress = (e.loaded / e.total) * 100;
              progressCallback(progress);
            }
          });
          
          xhr.addEventListener("load", () => {
            if (xhr.status >= 200 && xhr.status < 300) {
              resolve(xhr.responseText);
            } else {
              reject(new Error(`HTTP Error: ${xhr.status}`));
            }
          });
          
          xhr.addEventListener("error", () => {
            reject(new Error("Network Error"));
          });
          
          xhr.send(formData);
        });
      }

              // File filtering
              filterButtons.forEach(button => {
            button.addEventListener("click", () => {
              const filter = button.getAttribute("data-filter");
              
              // Update active button style
              filterButtons.forEach(btn => {
                btn.classList.remove("bg-blue-500", "text-white");
                btn.classList.add("bg-blue-100", "text-blue-800");
              });
              
              button.classList.remove("bg-blue-100", "text-blue-800");
              button.classList.add("bg-blue-500", "text-white");
              
              // Filter files
              fileCards.forEach(card => {
                if (filter === "all" || card.getAttribute("data-type") === filter) {
                  card.style.display = "block";
                } else {
                  card.style.display = "none";
                }
              });
            });
          });

          // Text file creation functionality
          const createTextBtn = document.getElementById("createTextBtn");
          const createTextModal = document.getElementById("createTextModal");
          const closeTextModal = document.getElementById("closeTextModal");
          const cancelTextBtn = document.getElementById("cancelTextBtn");
          const saveTextBtn = document.getElementById("saveTextBtn");
          const textFilename = document.getElementById("textFilename");
          const textContent = document.getElementById("textContent");

          createTextBtn.addEventListener("click", () => {
            createTextModal.style.display = "flex";
          });

          closeTextModal.addEventListener("click", () => {
            createTextModal.style.display = "none";
          });

          cancelTextBtn.addEventListener("click", () => {
            createTextModal.style.display = "none";
          });

          saveTextBtn.addEventListener("click", async () => {
            const filename = textFilename.value.trim() || "untitled.txt";
            const content = textContent.value;

            if (!content) {
              alert("Please enter some content for the text file");
              return;
            }

            try {
              const response = await axios.post(`/room/${roomId}/create-text`, {
                filename,
                content,
              });

              if (response.data.success) {
                alert("Text file created successfully!");
                window.location.reload();
              }
            } catch (error) {
              alert("Error creating text file: " + error.message);
            }
          });
        });
      </script>
    </body>
    </html>